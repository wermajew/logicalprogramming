
ves(romeo, juliet).

loves(juliet, romeo) :- loves(romeo, juliet).

male(albert).
male(bob).
male(bill).
male(carl).
male(carlie).
male(dan).
male(edward).

/**listing(male) shows all facts - db**/
female(alice).
female(betsy).
female(diana).
female(albert).

/**male(X), female(Y) shows all combinations of X,Y fulfilling rules**/

/**comma , acts as AND**/
happy(albert).
happy(alice).
happy(bob).
happy(bill).
with_albert(alice).
near_water(bob).

runs(albert) :-
    happy(albert).

dances(alice) :- happy(alice),
    with_albert(alice).

does_alice_dance :- 
    dances(alice),
    write('When Alice is happy and with Albert she dances').

swims(bill) :- 
    happy(bill).

swims(bill) :- 
    near_water(bill).


parent(albert, bob).
parent(albert, betsy).
parent(albert, bill).

parent(alice, bob).
parent(alice, betsy).
parent(alice, bill).

parent(bob, carl).
parent(bob, charlie).

get_grandchild :-
    parent(albert, Y),
    parent(Y, Z).


has_uncle :-
    parent(X, carl),
    parent(Z, X),
    parent(Z, Y).


get_grandparent(X, Y) :-
    parent(Z, X),
    parent(Y, Z).

human(derek).
blushes(X) :- human(X).

/**check for existance of predicate : male(_))**/

owns(tom, pet(cat,olive)).
owns(bas, pet(dog,olive)).

customer(sally, smith, 12.32).
customert(sal, smith, 3123.32).

horizontal(line(point(X,Y), point(X2,Y))).
vertical(line(point(X,Y), point(X, Y2))).
  
 
/**horizontal(line(point(5,6), X))**/
/**point(_1338, 6)**/

/** <examples>
?- trace. 
*/

/**recurstion**/
/**logical operators =:= =/=, ; , is, random, between, succ, abs, max, min round, truncate,
 *  floor, ceil, pow, **/

/**count down , count up to 10, low, height**/
/**guess number**/

